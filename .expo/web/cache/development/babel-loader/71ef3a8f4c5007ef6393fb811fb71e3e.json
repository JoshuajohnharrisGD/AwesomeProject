{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\dev\\\\project\\\\AwesomeProject\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      theText: 'Hello World',\n      displayBanana: false,\n      counter: 0\n    };\n\n    _this.theButtonGotPressed = function () {\n      var newCounterValue = _this.state.counter + 1;\n\n      if (!_this.state.displayBanana) {\n        _this.setState({\n          theText: 'banana' + newCounterValue,\n          displayBanana: true,\n          counter: newCounterValue\n        });\n      } else {\n        _this.setState({\n          theText: 'Hello World' + newCounterValue,\n          displayBanana: false,\n          counter: newCounterValue\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var styles = StyleSheet.create({\n        container: {\n          flex: 1,\n          backgroundColor: '#fff',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: 'white'\n        }\n      });\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        style: {\n          height: 40,\n          borderColor: 'black',\n          borderRadius: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        style: {\n          fontSize: 30,\n          fontWeight: 'bold',\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, this.state.theText), React.createElement(Button, {\n        title: \"Press me!\",\n        onPress: this.theButtonGotPressed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/dev/project/AwesomeProject/App.js"],"names":["React","Component","App","state","theText","displayBanana","counter","theButtonGotPressed","newCounterValue","setState","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","height","borderColor","borderRadius","fontSize","fontWeight","color"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;IAEqBC,G;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,aADH;AAENC,MAAAA,aAAa,EAAE,KAFT;AAGNC,MAAAA,OAAO,EAAE;AAHH,K;;UAKRC,mB,GAAsB,YAAM;AAC1B,UAAIC,eAAe,GAAG,MAAKL,KAAL,CAAWG,OAAX,GAAqB,CAA3C;;AACA,UAAI,CAAC,MAAKH,KAAL,CAAWE,aAAhB,EAA+B;AAC7B,cAAKI,QAAL,CAAc;AACZL,UAAAA,OAAO,EAAE,WAAWI,eADR;AAEZH,UAAAA,aAAa,EAAE,IAFH;AAGZC,UAAAA,OAAO,EAAEE;AAHG,SAAd;AAKD,OAND,MAMO;AACL,cAAKC,QAAL,CAAc;AACZL,UAAAA,OAAO,EAAE,gBAAgBI,eADb;AAEZH,UAAAA,aAAa,EAAE,KAFH;AAGZC,UAAAA,OAAO,EAAEE;AAHG,SAAd;AAKD;AACF,K;;;;;;;6BACQ;AACP,UAAME,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAE,CADG;AAETC,UAAAA,eAAe,EAAE,MAFR;AAGTC,UAAAA,UAAU,EAAE,QAHH;AAITC,UAAAA,cAAc,EAAE,QAJP;AAKTF,UAAAA,eAAe,EAAE;AALR;AADoB,OAAlB,CAAf;AASA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACK,UAAAA,MAAM,EAAE,EAAT;AAAaC,UAAAA,WAAW,EAAE,OAA1B;AAAmCC,UAAAA,YAAY,EAAE;AAAjD,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,UAAU,EAAE,MAA3B;AAAmCC,UAAAA,KAAK,EAAE;AAA1C,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkE,KAAKpB,KAAL,CAAWC,OAA7E,CAFF,EAGE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,EAAE,KAAKG,mBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOC;;;;EAvC4BN,S;;SAAZC,G","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, Text, View, Button, TextInput } from 'react-native';\nexport default class App extends Component {\n  state = {\n    theText: 'Hello World',\n    displayBanana: false,\n    counter: 0\n  }\n  theButtonGotPressed = () => {\n    var newCounterValue = this.state.counter + 1\n    if (!this.state.displayBanana) {\n      this.setState({\n        theText: 'banana' + newCounterValue,\n        displayBanana: true,\n        counter: newCounterValue\n      })\n    } else {\n      this.setState({\n        theText: 'Hello World' + newCounterValue,\n        displayBanana: false,\n        counter: newCounterValue\n      })\n    }\n  }\n  render() {\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'white'\n      },\n    });\n    return (\n      <View style={styles.container}>\n        <TextInput style={{height: 40, borderColor: 'black', borderRadius: 1}}></TextInput>\n        <Text style={{fontSize: 30, fontWeight: 'bold', color: 'black'}}>{this.state.theText}</Text>\n        <Button title=\"Press me!\" onPress={this.theButtonGotPressed}></Button>\n      </View>\n    );\n    }\n}"]},"metadata":{},"sourceType":"module"}